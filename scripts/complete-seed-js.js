#!/usr/bin/env node

const { PrismaClient } = require('@prisma/client');
const bcrypt = require('bcryptjs');

const prisma = new PrismaClient();

async function seedComplete() {
  console.log('üå± D√©but du seeding complet...');
  
  try {
    // Nettoyer la base de donn√©es d'abord (dans le bon ordre pour les cl√©s √©trang√®res)
    console.log('üßπ Nettoyage de la base de donn√©es...');
    
    await prisma.chatMessage.deleteMany();
    await prisma.chatbotMessage.deleteMany();
    await prisma.journalEntryTag.deleteMany();
    await prisma.journalEntry.deleteMany();
    await prisma.alertComment.deleteMany();
    await prisma.alert.deleteMany();
    await prisma.report.deleteMany();
    await prisma.studentAchievement.deleteMany();
    await prisma.studentResourceView.deleteMany();
    await prisma.studentResourceRating.deleteMany();
    await prisma.studentResourceFavorite.deleteMany();
    await prisma.student.deleteMany();
    // agent_schools sera supprim√© automatiquement par CASCADE quand on supprime les agents
    await prisma.agentUser.deleteMany();
    await prisma.adminUser.deleteMany();
    await prisma.libraryResource.deleteMany();
    await prisma.school.deleteMany();
    await prisma.tag.deleteMany();
    await prisma.achievement.deleteMany();
    console.log('‚úÖ Base de donn√©es nettoy√©e');

    // 1. Cr√©er les tags
    console.log('üè∑Ô∏è Cr√©ation des tags...');
    const tags = [
      { id: 'tag_school', name: '√âcole', icon: 'üè´', color: '#3b82f6', category: 'Activit√©' },
      { id: 'tag_friends', name: 'Amis', icon: 'üë•', color: '#10b981', category: 'Social' },
      { id: 'tag_family', name: 'Famille', icon: 'üë®‚Äçüë©‚Äçüëß', color: '#f59e0b', category: 'Social' },
      { id: 'tag_sport', name: 'Sport', icon: '‚öΩ', color: '#ef4444', category: 'Activit√©' },
      { id: 'tag_creativity', name: 'Cr√©ativit√©', icon: 'üé®', color: '#a855f7', category: 'Activit√©' },
      { id: 'tag_homework', name: 'Devoirs', icon: 'üìö', color: '#6b7280', category: '√âcole' },
      { id: 'tag_thoughts', name: 'Pens√©es', icon: 'üí≠', color: '#8b5cf6', category: '√âmotion' },
      { id: 'tag_emotions', name: '√âmotions', icon: '‚ù§Ô∏è', color: '#ec4899', category: '√âmotion' },
      { id: 'tag_event', name: '√âv√©nement', icon: 'üéâ', color: '#f97316', category: 'Vie' },
      { id: 'tag_difficulty', name: 'Difficult√©', icon: 'üòü', color: '#dc2626', category: '√âmotion' },
      { id: 'tag_success', name: 'R√©ussite', icon: 'üåü', color: '#fbbf24', category: 'Vie' },
      { id: 'tag_help', name: 'Besoin d\'aide', icon: 'üÜò', color: '#b91c1c', category: 'Important' },
    ];

    for (const tag of tags) {
      try {
        await prisma.tag.create({
          data: tag,
        });
      } catch (error) {
        if (error.code === 'P2002') {
          console.log(`‚ö†Ô∏è Tag ${tag.name} already exists, skipping...`);
        } else {
          throw error;
        }
      }
    }
    console.log('‚úÖ 12 tags cr√©√©s');

    // 2. Cr√©er les achievements
    console.log('üèÜ Cr√©ation des achievements...');
    const achievements = [
      { code: 'first_entry', name: 'Premier Pas', description: 'Tu as √©crit ta premi√®re entr√©e de journal !', icon: 'üå±', category: 'WRITING', threshold: 1 },
      { code: 'week_streak', name: 'Semaine Parfaite', description: '7 jours cons√©cutifs d\'√©criture, bravo !', icon: 'üî•', category: 'STREAK', threshold: 7 },
      { code: 'writer_30', name: '√âcrivain', description: '30 entr√©es dans ton journal, continue !', icon: 'üìñ', category: 'WRITING', threshold: 30 },
      { code: 'regular_30', name: 'R√©gulier', description: '30 jours cons√©cutifs, quelle pers√©v√©rance !', icon: 'üéØ', category: 'STREAK', threshold: 30 },
      { code: 'champion_100', name: 'Champion', description: '100 entr√©es totales, tu es incroyable !', icon: 'üåü', category: 'WRITING', threshold: 100 },
      { code: 'transformation', name: 'Transformation', description: 'Am√©lioration visible de ton humeur', icon: 'ü¶ã', category: 'SPECIAL', threshold: null },
      { code: 'courage', name: 'Courageux', description: 'Tu as fait un signalement, merci pour ton courage', icon: 'üí™', category: 'ENGAGEMENT', threshold: 1 },
      { code: 'open_heart', name: 'C≈ìur Ouvert', description: 'Tu as partag√© tes √©motions avec M√©lio', icon: '‚ù§Ô∏è', category: 'ENGAGEMENT', threshold: 1 },
      { code: 'rainbow', name: 'Arc-en-ciel', description: 'Tu as exprim√© toutes les humeurs', icon: 'üåà', category: 'SPECIAL', threshold: null },
      { code: 'creative', name: 'Cr√©atif', description: '10 photos ajout√©es √† ton journal', icon: 'üé®', category: 'WRITING', threshold: 10 },
    ];

    for (const achievement of achievements) {
      await prisma.achievement.create({ data: achievement });
    }
    console.log('‚úÖ 10 achievements cr√©√©s');

    // 3. Cr√©er l'admin
    console.log('üëë Cr√©ation de l\'admin...');
    const adminPassword = await bcrypt.hash('admin123', 12);
    await prisma.adminUser.create({
      data: {
        email: 'admin@melio.app',
        password: adminPassword,
        role: 'ROLE_ADMIN_MELIO',
      },
    });
    console.log('‚úÖ Admin cr√©√©: admin@melio.app / admin123');

    // 4. Cr√©er les √©coles avec des codes fixes
    console.log('üè´ Cr√©ation des √©coles...');
    const schoolsData = [
      { code: 'SCHOOL001', name: 'Coll√®ge Victor Hugo', city: 'Paris', postalCode: '75001', level: 'COLLEGE' },
      { code: 'SCHOOL002', name: 'Lyc√©e Louis Pasteur', city: 'Lyon', postalCode: '69001', level: 'LYCEE' },
      { code: 'SCHOOL003', name: '√âcole Primaire Marie Curie', city: 'Marseille', postalCode: '13001', level: 'PRIMARY' },
      { code: 'SCHOOL004', name: 'Coll√®ge Jules Verne', city: 'Toulouse', postalCode: '31000', level: 'COLLEGE' },
      { code: 'SCHOOL005', name: 'Lyc√©e Albert Einstein', city: 'Nice', postalCode: '06000', level: 'LYCEE' },
      { code: 'SCHOOL006', name: '√âcole Maternelle Les Petits Loups', city: 'Nantes', postalCode: '44000', level: 'PRIMARY' },
      { code: 'SCHOOL007', name: 'Coll√®ge Jean Moulin', city: 'Strasbourg', postalCode: '67000', level: 'COLLEGE' },
      { code: 'SCHOOL008', name: 'Lyc√©e Claude Monet', city: 'Montpellier', postalCode: '34000', level: 'LYCEE' },
      { code: 'SCHOOL009', name: '√âcole Primaire Les Lilas', city: 'Bordeaux', postalCode: '33000', level: 'PRIMARY' },
      { code: 'SCHOOL010', name: 'Coll√®ge Simone Veil', city: 'Lille', postalCode: '59000', level: 'COLLEGE' },
    ];

    const schools = [];
    for (const schoolData of schoolsData) {
      const school = await prisma.school.create({
        data: {
          code: schoolData.code,
          name: schoolData.name,
          address1: `${Math.floor(Math.random() * 200) + 1} rue de la R√©publique`,
          postalCode: schoolData.postalCode,
          city: schoolData.city,
          country: 'FR',
          timezone: 'Europe/Paris',
          level: schoolData.level,
          uaiCode: `${schoolData.postalCode.substring(0, 2)}${Math.floor(Math.random() * 1000000).toString().padStart(6, '0')}${String.fromCharCode(65 + Math.floor(Math.random() * 26))}`,
          contactName: `Directeur ${schoolData.name.split(' ')[1]}`,
          contactEmail: `contact@${schoolData.code.toLowerCase()}.fr`,
          contactPhone: `0${Math.floor(Math.random() * 900000000) + 100000000}`,
          idKey: Buffer.from(`test-key-for-${schoolData.code}-identification-123456789012`).toString('base64url'),
          idKeyVer: 1,
          settings: JSON.stringify({ theme: 'default' }),
          status: 'ACTIVE',
        },
      });
      schools.push(school);
    }
    console.log('‚úÖ 10 √©coles cr√©√©es');

    // 5. Cr√©er les agents (V2: multi-√©coles)
    console.log('üë®‚Äçüíº Cr√©ation des agents...');
    const agents = [];
    for (const school of schools) {
      const hashedPassword = await bcrypt.hash('agent123', 12);
      const agent = await prisma.agentUser.create({
        data: {
          email: `agent@${school.code.toLowerCase()}.fr`,
          password: hashedPassword,
          firstName: 'Agent',
          lastName: school.name.split(' ')[1] || 'Social',
          role: 'ROLE_AGENT',
          schools: {
            create: {
              schoolId: school.id,
            },
          },
        },
      });
      agents.push(agent);
    }
    console.log('‚úÖ 10 agents cr√©√©s');

    // 6. Cr√©er les ressources de biblioth√®que
    console.log('üìö Cr√©ation des ressources de biblioth√®que...');
    const libraryResources = [
      {
        title: 'Comment j\'ai surmont√© le harc√®lement',
        type: 'testimony',
        category: 'bullying',
        description: 'T√©moignage de Sarah, 16 ans, qui partage son exp√©rience et comment elle a retrouv√© confiance en elle.',
        content: 'Je m\'appelle Sarah et j\'ai 16 ans. Il y a deux ans, j\'√©tais victime de harc√®lement √† l\'√©cole...',
        duration: '8 min',
        author: 'Sarah M.',
        rating: 4.8,
        views: 1247,
        thumbnail: 'https://images.pexels.com/photos/3182834/pexels-photo-3182834.jpeg?auto=compress&cs=tinysrgb&w=400',
        isActive: true,
        isFeatured: true,
        tags: ['harc√®lement', 't√©moignage', 'confiance', 'adolescence'],
        metadata: JSON.stringify({ difficulty: 'beginner', language: 'fr', ageRange: '12-18' })
      },
      {
        title: 'G√©rer ses √©motions au quotidien',
        type: 'video',
        category: 'emotions',
        description: 'Techniques simples pour comprendre et g√©rer tes √©motions, expliqu√©es par une psychologue.',
        content: 'https://example.com/video/gerer-emotions',
        duration: '12 min',
        author: 'Dr. Claire Dubois',
        rating: 4.9,
        views: 2156,
        thumbnail: 'https://images.pexels.com/photos/3808904/pexels-photo-3808904.jpeg?auto=compress&cs=tinysrgb&w=400',
        isActive: true,
        isFeatured: true,
        tags: ['√©motions', 'psychologie', 'gestion', 'quotidien'],
        metadata: JSON.stringify({ difficulty: 'intermediate', language: 'fr', ageRange: '12-18', videoUrl: 'https://example.com/video/gerer-emotions' })
      },
      {
        title: 'Les vrais amis',
        type: 'book',
        category: 'friendship',
        description: 'Extrait du livre "Adolescence et amiti√©" - Comment reconna√Ætre les vraies amiti√©s.',
        content: 'L\'amiti√© √† l\'adolescence est un pilier fondamental de notre d√©veloppement...',
        author: 'Marie Rousseau',
        rating: 4.6,
        views: 892,
        thumbnail: 'https://images.pexels.com/photos/3182834/pexels-photo-3182834.jpeg?auto=compress&cs=tinysrgb&w=400',
        isActive: true,
        isFeatured: false,
        tags: ['amiti√©', 'relations', 'adolescence', 'livre'],
        metadata: JSON.stringify({ difficulty: 'beginner', language: 'fr', ageRange: '12-18', isbn: '978-2-123456-78-9' })
      },
      {
        title: 'Techniques de relaxation',
        type: 'article',
        category: 'emotions',
        description: '5 exercices de respiration pour g√©rer le stress et l\'anxi√©t√©.',
        content: 'Voici 5 techniques de relaxation que tu peux pratiquer n\'importe o√π...',
        duration: '5 min',
        author: 'Dr. Pierre Martin',
        rating: 4.7,
        views: 1563,
        thumbnail: 'https://images.pexels.com/photos/3808904/pexels-photo-3808904.jpeg?auto=compress&cs=tinysrgb&w=400',
        isActive: true,
        isFeatured: false,
        tags: ['relaxation', 'stress', 'anxi√©t√©', 'respiration'],
        metadata: JSON.stringify({ difficulty: 'beginner', language: 'fr', ageRange: '12-18', exercises: 5 })
      },
      {
        title: 'Construire sa confiance en soi',
        type: 'video',
        category: 'self-esteem',
        description: 'Exercices pratiques pour d√©velopper une image positive de soi.',
        content: 'https://example.com/video/confiance-soi',
        duration: '15 min',
        author: 'Sophie Laurent',
        rating: 4.9,
        views: 1892,
        thumbnail: 'https://images.pexels.com/photos/3182834/pexels-photo-3182834.jpeg?auto=compress&cs=tinysrgb&w=400',
        isActive: true,
        isFeatured: true,
        tags: ['confiance', 'estime', 'd√©veloppement', 'exercices'],
        metadata: JSON.stringify({ difficulty: 'intermediate', language: 'fr', ageRange: '12-18', videoUrl: 'https://example.com/video/confiance-soi' })
      },
      {
        title: 'Reconna√Ætre les signes de d√©pression',
        type: 'article',
        category: 'help',
        description: 'Guide pour identifier les signes de d√©pression chez les adolescents.',
        content: 'La d√©pression chez les adolescents peut se manifester de diff√©rentes fa√ßons...',
        author: 'Dr. Anne Moreau',
        rating: 4.5,
        views: 2341,
        thumbnail: 'https://images.pexels.com/photos/3808904/pexels-photo-3808904.jpeg?auto=compress&cs=tinysrgb&w=400',
        isActive: true,
        isFeatured: false,
        tags: ['d√©pression', 'signes', 'aide', 'sant√© mentale'],
        metadata: JSON.stringify({ difficulty: 'intermediate', language: 'fr', ageRange: '12-18', warning: 'Contenu sensible' })
      },
      {
        title: 'G√©rer les conflits entre amis',
        type: 'video',
        category: 'friendship',
        description: 'Techniques de communication pour r√©soudre les disputes entre amis.',
        content: 'https://example.com/video/conflits-amis',
        duration: '10 min',
        author: 'Thomas Bernard',
        rating: 4.4,
        views: 987,
        thumbnail: 'https://images.pexels.com/photos/3182834/pexels-photo-3182834.jpeg?auto=compress&cs=tinysrgb&w=400',
        isActive: true,
        isFeatured: false,
        tags: ['conflits', 'communication', 'amiti√©', 'r√©solution'],
        metadata: JSON.stringify({ difficulty: 'beginner', language: 'fr', ageRange: '12-18', videoUrl: 'https://example.com/video/conflits-amis' })
      },
      {
        title: 'Mon parcours de reconstruction',
        type: 'testimony',
        category: 'self-esteem',
        description: 'T√©moignage de Lucas sur sa reconstruction apr√®s des ann√©es de harc√®lement.',
        content: 'Bonjour, je m\'appelle Lucas et j\'ai 17 ans. Pendant 3 ans, j\'ai √©t√© harcel√©...',
        duration: '6 min',
        author: 'Lucas P.',
        rating: 4.8,
        views: 1456,
        thumbnail: 'https://images.pexels.com/photos/3182834/pexels-photo-3182834.jpeg?auto=compress&cs=tinysrgb&w=400',
        isActive: true,
        isFeatured: true,
        tags: ['reconstruction', 'harc√®lement', 't√©moignage', 'espoir'],
        metadata: JSON.stringify({ difficulty: 'beginner', language: 'fr', ageRange: '12-18', triggerWarning: 'Harc√®lement' })
      }
    ];

    for (const resourceData of libraryResources) {
      await prisma.libraryResource.create({
        data: {
          ...resourceData,
          schoolId: schools[0].id, // Associer √† la premi√®re √©cole
        },
      });
    }
    console.log('‚úÖ 8 ressources de biblioth√®que cr√©√©es');

    // 7. Cr√©er les √©l√®ves
    console.log('üë¶üëß Cr√©ation des √©l√®ves...');
    const firstNames = [
      'Emma', 'Lucas', 'Chlo√©', 'Nathan', 'L√©a', 'Hugo', 'Manon', 'Gabriel', 'Camille', 'Rapha√´l',
      'Sarah', 'Louis', 'Oc√©ane', 'Arthur', 'Lola', 'Jules', 'Marie', 'Tom', 'In√®s', 'Paul',
      'Louise', 'Noah', 'Alice', 'Ethan', 'Anna', 'Liam', 'Clara', 'Adam', 'Zo√©', 'L√©o',
      'Maya', 'Eliott', 'Julia', 'Charlotte', 'Antoine', 'Maxime', 'Alexandre', 'L√©na', 'Th√©o', 'Romane',
      'Mathis', 'Juliette', 'Enzo', 'Ambre', 'Pierre', 'Nicolas', '√âva', 'Baptiste', 'Lilou', 'Sacha',
      'Rose', 'Romain', 'Luna', 'Alexis', 'Ma√´lys', 'Valentin', 'Tim√©o', 'Lina', 'Malo', 'Lya',
      'Yanis', '√âlise', 'Gabin', 'L√©onie', 'Lucien', 'Nina', 'Axel', 'Mya', 'Na√´l', 'Alya',
      '√âden', 'Alba', 'Lyam', 'Lila', 'Lohan', 'Sofia', 'Kylian', 'Nino', 'Ma√´lle', 'Ily√®s',
      'Lou', 'Milan', 'Noam', 'L√©a', 'Ethan', 'Anna', 'Liam', 'Clara', 'Adam', 'Zo√©'
    ];

    const lastNames = [
      'Martin', 'Bernard', 'Thomas', 'Petit', 'Robert', 'Richard', 'Durand', 'Dubois', 'Moreau', 'Laurent',
      'Simon', 'Michel', 'Lefebvre', 'Leroy', 'Roux', 'David', 'Bertrand', 'Morel', 'Fournier', 'Girard',
      'Bonnet', 'Dupont', 'Lambert', 'Fontaine', 'Rousseau', 'Vincent', 'Muller', 'Lefevre', 'Faure', 'Andre',
      'Mercier', 'Blanc', 'Guerin', 'Boyer', 'Garnier', 'Chevalier', 'Francois', 'Legrand', 'Gauthier', 'Garcia',
      'Perrin', 'Robin', 'Clement', 'Morin', 'Henry', 'Roussel', 'Mathieu', 'Gautier', 'Masson', 'Marchand',
      'Duval', 'Denis', 'Dumont', 'Marie', 'Lemaire', 'Noel', 'Meyer', 'Dufour', 'Meunier', 'Brun',
      'Blanchard', 'Giraud', 'Joly', 'Riviere', 'Lucas', 'Brunet', 'Gaillard', 'Barbier', 'Arnaud', 'Martinez',
      'Roche', 'Renard', 'Schmitt', 'Roy', 'Leroux', 'Colin', 'Vidal', 'Caron', 'Picard', 'Roger'
    ];

    const classes = ['CP', 'CE1', 'CE2', 'CM1', 'CM2', '6eA', '6eB', '5eA', '5eB', '4eA', '4eB', '3eA', '3eB', '2ndeA', '2ndeB', '1√®reA', '1√®reB', 'TermA', 'TermB'];

    // Fonction pour supprimer les accents
    const removeAccents = (str) => {
      return str.normalize('NFD').replace(/[\u0300-\u036f]/g, '');
    };

    const students = [];
    for (let i = 0; i < 100; i++) {
      const school = schools[i % schools.length];
      const firstName = firstNames[i % firstNames.length];
      const lastName = lastNames[i % lastNames.length];
      const className = classes[i % classes.length];
      const uniqueId = `STU${(i + 1).toString().padStart(3, '0')}`; // STU001, STU002, etc. - ID fixe pour les tests

      const student = await prisma.student.create({
        data: {
          // Pas d'id sp√©cifi√© - Prisma g√©n√®re un ID normal
          schoolId: school.id,
          firstName,
          lastName,
          birthdate: new Date(2005 + Math.floor(Math.random() * 10), Math.floor(Math.random() * 12), Math.floor(Math.random() * 28) + 1),
          sex: Math.random() < 0.5 ? 'M' : 'F',
          className,
          parentName: `${firstNames[Math.floor(Math.random() * firstNames.length)]} ${lastNames[Math.floor(Math.random() * lastNames.length)]}`,
          parentPhone: `0${Math.floor(Math.random() * 900000000) + 100000000}`,
          parentEmail: Math.random() < 0.8 ? `parent.${lastName.toLowerCase()}@email.fr` : null,
          uniqueId, // ID fixe pour les tests
          uniqueIdVer: 1,
        },
      });
      students.push(student);
    }
    console.log('‚úÖ 100 √©l√®ves cr√©√©s');

    // 8. Cr√©er les alertes
    console.log('üö® Cr√©ation des alertes...');
    const alertContents = [
      'L\'√©l√®ve semble isol√© pendant les r√©cr√©ations et √©vite les interactions avec ses camarades.',
      'Incidents r√©p√©t√©s de moqueries et d\'insultes dans la cour de r√©cr√©ation.',
      'L\'√©l√®ve pr√©sente des signes d\'anxi√©t√© et de stress lors des examens.',
      'Conflits fr√©quents avec certains camarades de classe, tensions visibles.',
      'L\'√©l√®ve semble d√©prim√© et manque d\'enthousiasme pour les activit√©s scolaires.',
      'Comportement agressif observ√© envers d\'autres √©l√®ves, n√©cessite une attention particuli√®re.',
      'L\'√©l√®ve a des difficult√©s √† s\'int√©grer dans le groupe classe.',
      'Signes de harc√®lement potentiel, l\'√©l√®ve semble intimid√© par certains pairs.',
      'L\'√©l√®ve pr√©sente des troubles de l\'attention et de la concentration.',
      'Probl√®mes de communication avec les enseignants et les autres √©l√®ves.',
    ];

    const alertAdvice = [
      'Rencontrer l\'√©l√®ve en priv√© pour comprendre la situation et lui apporter du soutien.',
      'Organiser une m√©diation entre l\'√©l√®ve et ses camarades pour r√©soudre les conflits.',
      'Impliquer les parents dans le suivi et la r√©solution de la situation.',
      'Mettre en place un syst√®me de parrainage avec un √©l√®ve plus √¢g√© et bienveillant.',
      'Proposer des activit√©s de groupe pour favoriser l\'int√©gration sociale.',
      'Orienter l\'√©l√®ve vers le psychologue scolaire pour un accompagnement sp√©cialis√©.',
      'Renforcer les r√®gles de respect et de bienveillance dans la classe.',
      'Cr√©er un environnement s√©curis√© et inclusif pour tous les √©l√®ves.',
      'D√©velopper des comp√©tences sociales et √©motionnelles chez l\'√©l√®ve.',
      'Mettre en place un suivi r√©gulier et personnalis√© de la situation.',
    ];

    const riskLevels = ['FAIBLE', 'MOYEN', 'ELEVE', 'CRITIQUE'];
    const alertStatuses = ['NOUVELLE', 'EN_COURS', 'TRAITEE'];

    for (let i = 0; i < 200; i++) {
      const student = students[Math.floor(Math.random() * students.length)];
      const riskLevel = riskLevels[Math.floor(Math.random() * riskLevels.length)];
      const status = alertStatuses[Math.floor(Math.random() * alertStatuses.length)];
      const createdAt = new Date(Date.now() - Math.floor(Math.random() * 90) * 24 * 60 * 60 * 1000);

      await prisma.alert.create({
        data: {
          schoolId: student.schoolId,
          studentId: student.id,
          sourceId: `source_${i + 1}`,
          sourceType: 'JOURNAL',
          riskLevel,
          riskScore: Math.floor(Math.random() * 100) + 1,
          childMood: ['HAPPY', 'SAD', 'ANGRY', 'WORRIED', 'EXCITED'][Math.floor(Math.random() * 5)],
          aiSummary: alertContents[Math.floor(Math.random() * alertContents.length)],
          aiAdvice: alertAdvice[Math.floor(Math.random() * alertAdvice.length)],
          createdAt,
        },
      });
    }
    console.log('‚úÖ 200 alertes cr√©√©es');

    // 9. Cr√©er les signalements
    console.log('üìù Cr√©ation des signalements...');
    const reportContents = [
      'L\'√©l√®ve a √©t√© victime de moqueries r√©p√©t√©es de la part de certains camarades.',
      'Incidents de violence physique observ√©s dans la cour de r√©cr√©ation.',
      'L\'√©l√®ve semble √™tre exclu des activit√©s de groupe par ses pairs.',
      'Probl√®mes de communication et d\'int√©gration sociale observ√©s.',
      'L\'√©l√®ve pr√©sente des signes de d√©tresse √©motionnelle et de mal-√™tre.',
      'Conflits r√©currents entre l\'√©l√®ve et certains membres du personnel √©ducatif.',
      'L\'√©l√®ve semble √™tre la cible de harc√®lement verbal et psychologique.',
      'Difficult√©s d\'apprentissage et de concentration li√©es √† des probl√®mes sociaux.',
      'L\'√©l√®ve exprime des sentiments d\'isolement et de rejet par ses camarades.',
      'Incidents de cyberharc√®lement signal√©s par l\'√©l√®ve ou ses parents.',
    ];

    const reportAdvice = [
      'Mettre en place un suivi individuel avec l\'√©l√®ve pour comprendre ses besoins.',
      'Organiser une r√©union avec les parents pour discuter de la situation.',
      'Impliquer le conseiller d\'orientation pour un accompagnement sp√©cialis√©.',
      'Cr√©er un plan d\'action personnalis√© pour am√©liorer l\'int√©gration sociale.',
      'Mettre en place des mesures de protection et de pr√©vention.',
      'Orienter vers des services sp√©cialis√©s si n√©cessaire.',
      'Renforcer la communication entre l\'√©cole et la famille.',
      'D√©velopper des comp√©tences sociales et √©motionnelles.',
      'Cr√©er un environnement s√©curis√© et bienveillant.',
      'Assurer un suivi r√©gulier et adapt√© √† la situation.',
    ];

    const urgencies = ['FAIBLE', 'MOYEN', 'ELEVE', 'URGENT'];
    const reportStatuses = ['NOUVEAU', 'EN_COURS', 'TRAITE'];

    for (let i = 0; i < 100; i++) {
      const student = students[Math.floor(Math.random() * students.length)];
      const urgency = urgencies[Math.floor(Math.random() * urgencies.length)];
      const status = reportStatuses[Math.floor(Math.random() * reportStatuses.length)];
      const createdAt = new Date(Date.now() - Math.floor(Math.random() * 60) * 24 * 60 * 60 * 1000);

      await prisma.report.create({
        data: {
          schoolId: student.schoolId,
          studentId: student.id,
          content: reportContents[Math.floor(Math.random() * reportContents.length)],
          urgency,
          anonymous: Math.random() < 0.3, // 30% de signalements anonymes
          status,
          createdAt,
        },
      });
    }
    console.log('‚úÖ 100 signalements cr√©√©s');

    // 10. Cr√©er des entr√©es de journal
    console.log('üìñ Cr√©ation des entr√©es de journal...');
    const journalContents = [
      'Aujourd\'hui j\'ai pass√© une bonne journ√©e √† l\'√©cole. J\'ai eu une bonne note en maths !',
      'Je me sens un peu triste aujourd\'hui. Mes amis ne m\'ont pas parl√© pendant la r√©cr√©ation.',
      'Super journ√©e ! J\'ai jou√© au foot avec mes copains et on a gagn√© le match.',
      'J\'ai du mal √† me concentrer en classe. Je pense trop √† ce qui se passe √† la maison.',
      'Aujourd\'hui j\'ai aid√© un √©l√®ve de ma classe qui avait des difficult√©s. √áa m\'a fait plaisir.',
      'Je suis content car j\'ai r√©ussi √† faire mes devoirs tout seul pour la premi√®re fois.',
      'J\'ai peur de l\'examen de demain. J\'ai l\'impression de ne rien savoir.',
      'Mes parents se disputent beaucoup en ce moment. √áa me rend triste.',
      'J\'ai fait de nouveaux amis aujourd\'hui ! Ils sont tr√®s sympas.',
      'Je me sens seul √† l\'√©cole. Personne ne veut jouer avec moi.',
    ];

    const moods = ['HAPPY', 'SAD', 'ANGRY', 'WORRIED', 'EXCITED', 'CALM', 'CONFUSED', 'PROUD'];
    const journalTags = ['tag_school', 'tag_friends', 'tag_family', 'tag_sport', 'tag_creativity', 'tag_homework', 'tag_thoughts', 'tag_emotions', 'tag_event', 'tag_difficulty', 'tag_success', 'tag_help'];

    for (let i = 0; i < 50; i++) {
      const student = students[Math.floor(Math.random() * students.length)];
      const content = journalContents[Math.floor(Math.random() * journalContents.length)];
      const mood = moods[Math.floor(Math.random() * moods.length)];
      const createdAt = new Date(Date.now() - Math.floor(Math.random() * 30) * 24 * 60 * 60 * 1000);

      const journalEntry = await prisma.journalEntry.create({
        data: {
          studentId: student.id,
          contentText: content,
          mood,
          color: ['pink', 'blue', 'green', 'yellow', 'purple', 'orange'][Math.floor(Math.random() * 6)],
          photos: Math.random() < 0.3 ? [`https://example.com/photo${i + 1}.jpg`] : [],
          aiRiskScore: Math.floor(Math.random() * 100),
          createdAt,
        },
      });

      // Ajouter des tags √† certaines entr√©es
      if (Math.random() < 0.7) { // 70% des entr√©es ont des tags
        const numTags = Math.floor(Math.random() * 3) + 1; // 1 √† 3 tags
        const selectedTags = journalTags.sort(() => 0.5 - Math.random()).slice(0, numTags);
        
        for (const tagId of selectedTags) {
          await prisma.journalEntryTag.create({
            data: {
              journalEntryId: journalEntry.id,
              tagId: tagId,
            },
          });
        }
      }
    }
    console.log('‚úÖ 50 entr√©es de journal cr√©√©es');

    // 11. Cr√©er des messages de chatbot
    console.log('ü§ñ Cr√©ation des messages de chatbot...');
    const chatbotMessages = [
      'Bonjour ! Comment te sens-tu aujourd\'hui ?',
      'Je suis l√† pour t\'√©couter. Veux-tu me parler de quelque chose ?',
      'C\'est normal de ressentir ces √©motions. Tu n\'es pas seul(e).',
      'As-tu parl√© de cela avec un adulte de confiance ?',
      'Je comprends que ce soit difficile. Prends ton temps.',
      'Es-tu en s√©curit√© en ce moment ?',
      'Veux-tu que je t\'aide √† trouver des solutions ?',
      'Comment puis-je t\'aider aujourd\'hui ?',
      'Je suis fier(e) de toi pour avoir partag√© cela.',
      'N\'h√©site pas √† me parler si tu as besoin.',
    ];

    for (let i = 0; i < 30; i++) {
      const student = students[Math.floor(Math.random() * students.length)];
      const content = chatbotMessages[Math.floor(Math.random() * chatbotMessages.length)];
      const createdAt = new Date(Date.now() - Math.floor(Math.random() * 15) * 24 * 60 * 60 * 1000);

      await prisma.chatbotMessage.create({
        data: {
          studentId: student.id,
          type: 'BOT',
          content,
          resourceId: Math.random() < 0.3 ? `resource_${Math.floor(Math.random() * 8) + 1}` : null,
          relatedTo: Math.random() < 0.5 ? `journal_${Math.floor(Math.random() * 50) + 1}` : null,
          createdAt,
        },
      });
    }
    console.log('‚úÖ 30 messages de chatbot cr√©√©s');

    console.log('üéâ Seeding complet termin√© avec succ√®s!');
    
    // R√©sum√©
    console.log('\nüìä R√©sum√© :');
    console.log('   üè´ √âcoles : 10');
    console.log('   üë®‚Äçüíº Agents : 10 (V2: multi-√©coles)');
    console.log('   üë¶üëß √âl√®ves : 100');
    console.log('   üè∑Ô∏è Tags : 12');
    console.log('   üèÜ Achievements : 10');
    console.log('   üìö Ressources biblioth√®que : 8');
    console.log('   üö® Alertes : 200');
    console.log('   üìù Signalements : 100');
    console.log('   üìñ Entr√©es de journal : 50');
    console.log('   ü§ñ Messages de chatbot : 30');
    
  } catch (error) {
    console.error('‚ùå Erreur lors du seeding:', error);
    throw error;
  } finally {
    await prisma.$disconnect();
  }
}

// Ex√©cuter le seeding
seedComplete()
  .then(() => {
    console.log('‚úÖ Seeding termin√© avec succ√®s!');
    process.exit(0);
  })
  .catch((error) => {
    console.error('‚ùå Erreur lors du seeding:', error);
    process.exit(1);
  });