#!/usr/bin/env node

/**
 * Script de seed avec de vraies donn√©es de test
 * Cr√©e 100 √©l√®ves, 10 √©coles, 10 agents, 200 alertes et 100 signalements
 */

const { PrismaClient } = require('@prisma/client');
const bcrypt = require('bcrypt');

async function seedTestData() {
  const prisma = new PrismaClient();
  
  try {
    console.log('üå± D√©but du seeding avec donn√©es de test...');
    
    // V√©rifier que les tables existent
    console.log('üîç V√©rification des tables...');
    const tables = await prisma.$queryRaw`
      SELECT table_name 
      FROM information_schema.tables 
      WHERE table_schema = 'public' 
      AND table_name IN ('schools', 'agent_users', 'students', 'alerts', 'reports', 'journal_entries')
    `;
    
    if (tables.length < 6) {
      console.log('‚ùå Tables manquantes. Ex√©cutez d\'abord force-migrate.js');
      return;
    }
    
    console.log('‚úÖ Toutes les tables sont pr√©sentes');
    
    // Noms et donn√©es r√©alistes
    const firstNames = [
      'Emma', 'Lucas', 'Chlo√©', 'Nathan', 'L√©a', 'Hugo', 'Manon', 'Gabriel', 'Camille', 'Rapha√´l',
      'Sarah', 'Louis', 'Oc√©ane', 'Arthur', 'Lola', 'Jules', 'Marie', 'Tom', 'In√®s', 'Paul',
      'Louise', 'Noah', 'Alice', 'Ethan', 'Anna', 'Liam', 'Clara', 'Adam', 'Zo√©', 'L√©o',
      'Maya', 'Eliott', 'Julia', 'Lucas', 'Charlotte', 'Antoine', 'L√©a', 'Maxime', 'Emma', 'Alexandre',
      'L√©na', 'Th√©o', 'Romane', 'Mathis', 'Juliette', 'Enzo', 'Ambre', 'Pierre', 'Lola', 'Nicolas',
      '√âva', 'Baptiste', 'Lilou', 'Sacha', 'Rose', 'Romain', 'Luna', 'Alexis', 'Ma√´lys', 'Valentin',
      'Chlo√©', 'Tim√©o', 'Lina', 'Malo', 'Lya', 'Yanis', '√âlise', 'Gabin', 'L√©onie', 'Lucien',
      'Nina', 'Axel', 'Mya', 'Na√´l', 'Alya', '√âden', 'Alba', 'Lyam', 'Lila', 'Lohan',
      'Sofia', 'Kylian', 'L√©na', 'Nino', 'Ma√´lle', 'Ily√®s', 'Lou', 'Milan', 'L√©na', 'Noam'
    ];
    
    const lastNames = [
      'Martin', 'Bernard', 'Thomas', 'Petit', 'Robert', 'Richard', 'Durand', 'Dubois', 'Moreau', 'Laurent',
      'Simon', 'Michel', 'Lefebvre', 'Leroy', 'Roux', 'David', 'Bertrand', 'Morel', 'Fournier', 'Girard',
      'Bonnet', 'Dupont', 'Lambert', 'Fontaine', 'Rousseau', 'Vincent', 'Muller', 'Lefevre', 'Faure', 'Andre',
      'Mercier', 'Blanc', 'Guerin', 'Boyer', 'Garnier', 'Chevalier', 'Francois', 'Legrand', 'Gauthier', 'Garcia',
      'Perrin', 'Robin', 'Clement', 'Morin', 'Nicolas', 'Henry', 'Roussel', 'Mathieu', 'Gautier', 'Masson',
      'Marchand', 'Duval', 'Denis', 'Dumont', 'Marie', 'Lemaire', 'Noel', 'Meyer', 'Dufour', 'Meunier',
      'Brun', 'Blanchard', 'Giraud', 'Joly', 'Riviere', 'Lucas', 'Brunet', 'Gaillard', 'Barbier', 'Arnaud',
      'Martinez', 'Roche', 'Renard', 'Schmitt', 'Roy', 'Leroux', 'Colin', 'Vidal', 'Caron', 'Picard'
    ];
    
    const cities = [
      'Paris', 'Lyon', 'Marseille', 'Toulouse', 'Nice', 'Nantes', 'Strasbourg', 'Montpellier', 'Bordeaux', 'Lille',
      'Rennes', 'Reims', 'Toulon', 'Le Havre', 'Grenoble', 'Dijon', 'Angers', 'N√Æmes', 'Villeurbanne', 'Saint-√âtienne'
    ];
    
    const schoolNames = [
      '√âcole Primaire Victor Hugo', 'Coll√®ge Jules Verne', 'Lyc√©e Marie Curie', '√âcole Maternelle Les Petits Loups',
      'Coll√®ge Jean Moulin', 'Lyc√©e Albert Einstein', '√âcole Primaire Les Lilas', 'Coll√®ge Pierre et Marie Curie',
      'Lyc√©e Louis Pasteur', '√âcole Maternelle Arc-en-Ciel', 'Coll√®ge Simone Veil', 'Lyc√©e Claude Monet',
      '√âcole Primaire Les Roses', 'Coll√®ge Antoine de Saint-Exup√©ry', 'Lyc√©e Frida Kahlo', '√âcole Maternelle Les √âtoiles',
      'Coll√®ge L√©onard de Vinci', 'Lyc√©e Nelson Mandela', '√âcole Primaire Les Coquelicots', 'Coll√®ge Rosa Parks'
    ];
    
    const classes = [
      'CP', 'CE1', 'CE2', 'CM1', 'CM2', '6√®me', '5√®me', '4√®me', '3√®me', '2nde', '1√®re', 'Terminale'
    ];
    
    const moods = ['Heureux', 'Triste', 'En col√®re', 'Anxieux', 'Fatigu√©', 'Excit√©', 'Calme', 'Stress√©', 'Content', 'Inquiet'];
    
    const riskLevels = ['FAIBLE', 'MOYEN', '√âLEV√â', 'CRITIQUE'];
    
    const alertStatuses = ['NOUVELLE', 'EN_COURS', 'R√âSOLUE', 'ARCHIV√âE'];
    
    const reportStatuses = ['NOUVEAU', 'EN_COURS', 'TRAIT√â', 'CL√îTUR√â'];
    
    const urgencies = ['FAIBLE', 'MOYENNE', '√âLEV√âE', 'URGENTE'];
    
    // 1. Cr√©er 10 √©coles
    console.log('üè´ Cr√©ation de 10 √©coles...');
    const schools = [];
    for (let i = 0; i < 10; i++) {
      const school = await prisma.school.upsert({
        where: { code: `SCHOOL${String(i + 1).padStart(3, '0')}` },
        update: {},
        create: {
          code: `SCHOOL${String(i + 1).padStart(3, '0')}`,
          name: schoolNames[i],
          address1: `${Math.floor(Math.random() * 99) + 1} rue de la Paix`,
          postalCode: `${Math.floor(Math.random() * 90000) + 10000}`,
          city: cities[Math.floor(Math.random() * cities.length)],
          country: 'FR',
          timezone: 'Europe/Paris',
          level: i < 3 ? 'PRIMAIRE' : i < 7 ? 'COLL√àGE' : 'LYC√âE',
          contactName: `Directeur ${lastNames[Math.floor(Math.random() * lastNames.length)]}`,
          contactEmail: `contact@${schoolNames[i].toLowerCase().replace(/\s+/g, '')}.fr`,
          contactPhone: `0${Math.floor(Math.random() * 900000000) + 100000000}`,
          idKey: `ID${Math.random().toString(36).substring(2, 15)}`,
          idKeyVer: 1,
          status: 'ACTIVE'
        }
      });
      schools.push(school);
    }
    console.log(`‚úÖ ${schools.length} √©coles cr√©√©es`);
    
    // 2. Cr√©er 10 agents (1 par √©cole)
    console.log('üë®‚Äçüè´ Cr√©ation de 10 agents...');
    const agents = [];
    const hashedPassword = await bcrypt.hash('agent123', 12);
    
    for (let i = 0; i < 10; i++) {
      const firstName = firstNames[Math.floor(Math.random() * firstNames.length)];
      const lastName = lastNames[Math.floor(Math.random() * lastNames.length)];
      
      const agent = await prisma.agentUser.upsert({
        where: { email: `agent${i + 1}@${schools[i].name.toLowerCase().replace(/\s+/g, '')}.fr` },
        update: {},
        create: {
          schoolId: schools[i].id,
          email: `agent${i + 1}@${schools[i].name.toLowerCase().replace(/\s+/g, '')}.fr`,
          password: hashedPassword,
          role: 'ROLE_AGENT'
        }
      });
      agents.push(agent);
    }
    console.log(`‚úÖ ${agents.length} agents cr√©√©s`);
    
    // 3. Cr√©er 100 √©l√®ves (10 par √©cole)
    console.log('üë∂ Cr√©ation de 100 √©l√®ves...');
    const students = [];
    
    for (let schoolIndex = 0; schoolIndex < 10; schoolIndex++) {
      for (let studentIndex = 0; studentIndex < 10; studentIndex++) {
        const firstName = firstNames[Math.floor(Math.random() * firstNames.length)];
        const lastName = lastNames[Math.floor(Math.random() * lastNames.length)];
        const birthYear = 2010 + Math.floor(Math.random() * 8); // 2010-2017
        const birthMonth = Math.floor(Math.random() * 12) + 1;
        const birthDay = Math.floor(Math.random() * 28) + 1;
        const className = classes[Math.floor(Math.random() * classes.length)];
        
        const student = await prisma.student.upsert({
          where: { 
            schoolId_uniqueId: {
              schoolId: schools[schoolIndex].id,
              uniqueId: `STU${schoolIndex + 1}${String(studentIndex + 1).padStart(2, '0')}`
            }
          },
          update: {},
          create: {
            schoolId: schools[schoolIndex].id,
            firstName,
            lastName,
            birthdate: new Date(birthYear, birthMonth - 1, birthDay),
            sex: Math.random() > 0.5 ? 'M' : 'F',
            className,
            parentName: `${firstNames[Math.floor(Math.random() * firstNames.length)]} ${lastNames[Math.floor(Math.random() * lastNames.length)]}`,
            parentPhone: `0${Math.floor(Math.random() * 900000000) + 100000000}`,
            parentEmail: `parent.${lastName.toLowerCase()}@email.com`,
            uniqueId: `STU${schoolIndex + 1}${String(studentIndex + 1).padStart(2, '0')}`,
            uniqueIdVer: 1
          }
        });
        students.push(student);
      }
    }
    console.log(`‚úÖ ${students.length} √©l√®ves cr√©√©s`);
    
    // 4. Cr√©er 200 alertes
    console.log('üö® Cr√©ation de 200 alertes...');
    const alerts = [];
    
    for (let i = 0; i < 200; i++) {
      const student = students[Math.floor(Math.random() * students.length)];
      const riskLevel = riskLevels[Math.floor(Math.random() * riskLevels.length)];
      const status = alertStatuses[Math.floor(Math.random() * alertStatuses.length)];
      const mood = moods[Math.floor(Math.random() * moods.length)];
      
      const alert = await prisma.alert.create({
        data: {
          schoolId: student.schoolId,
          studentId: student.id,
          sourceId: `JOURNAL_${Math.random().toString(36).substring(2, 15)}`,
          sourceType: 'JOURNAL',
          riskLevel,
          riskScore: Math.floor(Math.random() * 100) + 1,
          childMood: mood,
          aiSummary: `Analyse IA : L'√©l√®ve ${student.firstName} ${student.lastName} pr√©sente des signes de ${mood.toLowerCase()}. Situation √† surveiller.`,
          aiAdvice: `Conseil IA : Encourager le dialogue avec l'√©l√®ve et surveiller son comportement en classe.`,
          status
        }
      });
      alerts.push(alert);
    }
    console.log(`‚úÖ ${alerts.length} alertes cr√©√©es`);
    
    // 5. Cr√©er 100 signalements
    console.log('üìù Cr√©ation de 100 signalements...');
    const reports = [];
    
    for (let i = 0; i < 100; i++) {
      const school = schools[Math.floor(Math.random() * schools.length)];
      const student = Math.random() > 0.3 ? students.find(s => s.schoolId === school.id) : null;
      const urgency = urgencies[Math.floor(Math.random() * urgencies.length)];
      const status = reportStatuses[Math.floor(Math.random() * reportStatuses.length)];
      const anonymous = Math.random() > 0.7;
      
      const contents = [
        '√âl√®ve agressif en r√©cr√©ation',
        'Probl√®me de comportement en classe',
        'Harc√®lement suspect√©',
        '√âl√®ve isol√© et triste',
        'Conflit entre √©l√®ves',
        'Probl√®me de concentration',
        '√âl√®ve agit√© et perturbateur',
        'Difficult√©s relationnelles',
        'Comportement inqui√©tant',
        '√âl√®ve en souffrance apparente'
      ];
      
      const content = contents[Math.floor(Math.random() * contents.length)];
      
      const report = await prisma.report.create({
        data: {
          schoolId: school.id,
          studentId: student ? student.id : null,
          content: `${content}${student ? ` - √âl√®ve concern√© : ${student.firstName} ${student.lastName}` : ''}`,
          urgency,
          anonymous,
          status
        }
      });
      reports.push(report);
    }
    console.log(`‚úÖ ${reports.length} signalements cr√©√©s`);
    
    // 6. Cr√©er quelques entr√©es de journal
    console.log('üìñ Cr√©ation d\'entr√©es de journal...');
    for (let i = 0; i < 50; i++) {
      const student = students[Math.floor(Math.random() * students.length)];
      const mood = moods[Math.floor(Math.random() * moods.length)];
      
      const journalContents = [
        `Aujourd'hui, je me sens ${mood.toLowerCase()}.`,
        `La journ√©e s'est bien pass√©e. Je suis ${mood.toLowerCase()}.`,
        `J'ai eu quelques difficult√©s aujourd'hui. Je me sens ${mood.toLowerCase()}.`,
        `Super journ√©e ! Je suis ${mood.toLowerCase()}.`,
        `J'ai pass√© une journ√©e normale. Je me sens ${mood.toLowerCase()}.`
      ];
      
      const journalId = `journal_${Math.random().toString(36).substring(2, 15)}`;
      const content = journalContents[Math.floor(Math.random() * journalContents.length)];
      
      await prisma.$executeRawUnsafe(`
        INSERT INTO "journal_entries" ("id", "studentId", "content", "mood", "createdAt", "contentText")
        VALUES ('${journalId}', '${student.id}', '${content.replace(/'/g, "''")}', '${mood}', CURRENT_TIMESTAMP, '${content.replace(/'/g, "''")}')
      `);
    }
    console.log('‚úÖ 50 entr√©es de journal cr√©√©es');
    
    // 7. Cr√©er quelques messages de chat
    console.log('üí¨ Cr√©ation de messages de chat...');
    for (let i = 0; i < 30; i++) {
      const student = students[Math.floor(Math.random() * students.length)];
      const sender = Math.random() > 0.5 ? 'STUDENT' : 'AGENT';
      
      const messages = [
        'Bonjour, comment allez-vous ?',
        'J\'ai besoin d\'aide avec mes devoirs.',
        'Je me sens un peu triste aujourd\'hui.',
        'Merci pour votre soutien.',
        'Pouvez-vous m\'aider ?',
        'Je vais bien, merci !',
        'J\'ai des questions sur l\'√©cole.',
        'Je me sens mieux maintenant.'
      ];
      
      await prisma.chatMessage.create({
        data: {
          studentId: student.id,
          message: messages[Math.floor(Math.random() * messages.length)],
          sender
        }
      });
    }
    console.log('‚úÖ 30 messages de chat cr√©√©s');
    
    console.log('\nüéâ Seeding termin√© avec succ√®s !');
    console.log(`üìä R√©sum√© :`);
    console.log(`   üè´ √âcoles : ${schools.length}`);
    console.log(`   üë®‚Äçüè´ Agents : ${agents.length}`);
    console.log(`   üë∂ √âl√®ves : ${students.length}`);
    console.log(`   üö® Alertes : ${alerts.length}`);
    console.log(`   üìù Signalements : ${reports.length}`);
    console.log(`   üìñ Entr√©es journal : 50`);
    console.log(`   üí¨ Messages chat : 30`);
    
    console.log('\nüîë Comptes de test :');
    console.log('   Admin : admin@melio.com / admin123');
    for (let i = 0; i < 3; i++) {
      console.log(`   Agent ${i + 1} : agent${i + 1}@${schools[i].name.toLowerCase().replace(/\s+/g, '')}.fr / agent123`);
    }
    
  } catch (error) {
    console.error('‚ùå Erreur lors du seeding:', error);
  } finally {
    await prisma.$disconnect();
  }
}

seedTestData().catch(console.error);
